<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>Gregorian * Hebrew calendar converter</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<script language="JavaScript" type= "text/javascript" src="hebrewdate0.js"></script>

<script language="javaScript" type= "text/javascript">

/* Original Javascript engine by John Walker, Fourmilab. This program is in the public domain. */

var J0000 = 1721424.5;                // Julian date of Gregorian epoch: 0000-01-01
var J1970 = 2440587.5;                // Julian date at Unix epoch: 1970-01-01
var JMJD  = 2400000.5;                // Epoch of Modified Julian Date system
var J1900 = 2415020.5;                // Epoch (day 1) of Excel 1900 date system (PC)
var J1904 = 2416480.5;                // Epoch (day 0) of Excel 1904 date system (Mac)
var juliandayvalue=0;
var NormLeap = new Array("Normal year (365 days)", "Leap year (366 days)");

function alerting(message)
{document.message.infobox.value=message}

/*  WEEKDAY_BEFORE  --  Return Julian date of given weekday (0 = Sunday)
                        in the seven days ending on jd.  */

function weekday_before(weekday, jd)
{return jd - jwday(jd - weekday);
}

/*  SEARCH_WEEKDAY  --  Determine the Julian date for: 
            weekday      Day of week desired, 0 = Sunday
            jd           Julian date to begin search
            direction    1 = next weekday, -1 = last weekday
            offset       Offset from jd to begin search
*/

function search_weekday(weekday, jd, direction, offset)
{return weekday_before(weekday, jd + (direction * offset));
}

//  Utility weekday functions, just wrappers for search_weekday

function nearest_weekday(weekday, jd)
{return search_weekday(weekday, jd, 1, 3);
}

function next_weekday(weekday, jd)
{return search_weekday(weekday, jd, 1, 7);
}

function next_or_current_weekday(weekday, jd)
{return search_weekday(weekday, jd, 1, 6);
}

function previous_weekday(weekday, jd)
{return search_weekday(weekday, jd, -1, 1);
}

function previous_or_current_weekday(weekday, jd)
{return search_weekday(weekday, jd, 1, 0);
}

//  LEAP_GREGORIAN  --  Is a given year in the Gregorian calendar a leap year ?

function leap_gregorian(year)
{return ((year % 4) == 0) &&
            (!(((year % 100) == 0) && ((year % 400) != 0)));
}

//  GREGORIAN_TO_JD  --  Determine Julian day number from Gregorian calendar date

var GREGORIAN_EPOCH = 1721425.5;

function gregorian_to_jd(year, month, day)
{return (GREGORIAN_EPOCH - 1) +
           (365 * (year - 1)) +
           Math.floor((year - 1) / 4) +
           (-Math.floor((year - 1) / 100)) +
           Math.floor((year - 1) / 400) +
           Math.floor((((367 * month) - 362) / 12) +
           ((month <= 2) ? 0 :
                               (leap_gregorian(year) ? -1 : -2)
           ) +
           day);
}

//  JD_TO_GREGORIAN  --  Calculate Gregorian calendar date from Julian day

function jd_to_gregorian(jd)
{var wjd, depoch, quadricent, dqc, cent, dcent, quad, dquad,
 yindex, dyindex, year, yearday, leapadj;

 wjd = Math.floor(jd - 0.5) + 0.5;
    depoch = wjd - GREGORIAN_EPOCH;
    quadricent = Math.floor(depoch / 146097);
    dqc = mod(depoch, 146097);
    cent = Math.floor(dqc / 36524);
    dcent = mod(dqc, 36524);
    quad = Math.floor(dcent / 1461);
    dquad = mod(dcent, 1461);
    yindex = Math.floor(dquad / 365);
    year = (quadricent * 400) + (cent * 100) + (quad * 4) + yindex;
    if (!((cent == 4) || (yindex == 4))) {
        year++;
    }
    yearday = wjd - gregorian_to_jd(year, 1, 1);
    leapadj = ((wjd < gregorian_to_jd(year, 3, 1)) ? 0
                                                  :
                  (leap_gregorian(year) ? 1 : 2)
              );
 month = Math.floor((((yearday + leapadj) * 12) + 373) / 367);
 day = (wjd - gregorian_to_jd(year, month, 1)) + 1;
 return new Array(year, month, day);
}

//  ISO_TO_JULIAN  --  Return Julian day of given ISO year, week, and day

function n_weeks(weekday, jd, nthweek)
{var j = 7 * nthweek;
 if (nthweek > 0) {
        j += previous_weekday(weekday, jd);
    } else {
        j += next_weekday(weekday, jd);
    }
 return j;
}

function iso_to_julian(year, week, day)
{return day + n_weeks(0, gregorian_to_jd(year - 1, 12, 28), week);
}

//  JD_TO_ISO  --  Return array of ISO (year, week, day) for Julian day

function jd_to_iso(jd)
{var year, week, day;
 year = jd_to_gregorian(jd - 3)[0];
 if (jd >= iso_to_julian(year + 1, 1, 1)) {
 year++;
 }
 week = Math.floor((jd - iso_to_julian(year, 1, 1)) / 7) + 1;
 day = jwday(jd);
 if (day == 0) {
     day = 7;
    }
 return new Array(year, week, day);
}

//  ISO_DAY_TO_JULIAN  --  Return Julian day of given ISO year, and day of year

function iso_day_to_julian(year, day)
{return (day - 1) + gregorian_to_jd(year, 1, 1);
}

//  JD_TO_ISO_DAY  --  Return array of ISO (year, day_of_year) for Julian day

function jd_to_iso_day(jd)
{
    var year, day;

    year = jd_to_gregorian(jd)[0];
    day = Math.floor(jd - gregorian_to_jd(year, 1, 1)) + 1;
    return new Array(year, day);
}

/*  PAD  --  Pad a string to a given length with a given fill character.  */

function pad(str, howlong, padwith)
{var s = str.toString();
 while (s.length < howlong) {s = padwith + s;}
 return s;
}

//  JULIAN_TO_JD  --  Determine Julian day number from Julian calendar date

var JULIAN_EPOCH = 1721423.5;

function leap_julian(year)
{return (year % 4) == ((year > 0) ? 0 : 3);
}

function julian_to_jd(year, month, day) {
  /* Adjust negative common era years to the zero-based notation we use.  */
  if (year < 1) {year++;}

  /* Algorithm as given in Meeus, Astronomical Algorithms, Chapter 7, page 61 */

  if (month <= 2) {year--;month += 12;}

  return ((Math.floor((365.25 * (year + 4716))) +
              Math.floor((30.6001 * (month + 1))) +
              day) - 1524.5);
}

//  JD_TO_JULIAN  --  Calculate Julian calendar date from Julian day

function jd_to_julian(td) {
    var z, a, alpha, b, c, d, e, year, month, day;
    td += 0.5;
    z = Math.floor(td);
    a = z;
    b = a + 1524;
    c = Math.floor((b - 122.1) / 365.25);
    d = Math.floor(365.25 * c);
    e = Math.floor((b - d) / 30.6001);
    month = Math.floor((e < 14) ? (e - 1) : (e - 13));
    year = Math.floor((month > 2) ? (c - 4716) : (c - 4715));
    day = b - d - Math.floor(30.6001 * e);

    /*  If year is less than 1, subtract one to convert from
        a zero based date system to the common era system in
        which the year -1 (1 B.C.E) is followed by year 1 (1 C.E.).  */

    if (year < 1) {year--;}
    return new Array(year, month, day);
}

//  HEBREW_TO_JD  --  Determine Julian day from Hebrew date

var HEBREW_EPOCH = 347995.5;

//  Is a given Hebrew year a leap year ?

function hebrew_leap(year)
{return mod(((year * 7) + 1), 19) < 7;
}

//  How many months are there in a Hebrew year (12 = normal, 13 = leap)

function hebrew_year_months(year)
{return hebrew_leap(year) ? 13 : 12;
}

//  Test for delay of start of new year and to avoid
//  Sunday, Wednesday, and Friday as start of the new year.

function hebrew_delay_1(year)
{var months, days, parts;
 months = Math.floor(((235 * year) - 234) / 19);
 parts = 12084 + (13753 * months);
 day = (months * 29) + Math.floor(parts / 25920);
 if (mod((3 * (day + 1)), 7) < 3) {day++;}
 return day;
}

//  Check for delay in start of new year due to length of adjacent years

function hebrew_delay_2(year)
{var last, present, next;
 last = hebrew_delay_1(year - 1);
 present = hebrew_delay_1(year);
 next = hebrew_delay_1(year + 1);
 return ((next - present) == 356) ? 2 : (((present - last) == 382) ? 1 : 0);
}

//  How many days are in a Hebrew year ?

function hebrew_year_days(year)
{return hebrew_to_jd(year + 1, 7, 1) - hebrew_to_jd(year, 7, 1);
}

//  How many days are in a given month of a given year

function hebrew_month_days(year, month)
{
 //  First of all, dispose of fixed-length 29 day months
 if (month == 2 || month == 4 || month == 6 || month == 10 || month == 13) {return 29;}

 //  If it's not a leap year, Adar has 29 days
 if (month == 12 && !hebrew_leap(year)) {return 29;}

 //  If it's Heshvan, days depend on length of year
 if (month == 8 && !(mod(hebrew_year_days(year), 10) == 5)) {return 29;}

 //  Similarly, Kislev varies with the length of year
 if (month == 9 && (mod(hebrew_year_days(year), 10) == 3)) {return 29;}

 //  Nope, it's a 30 day month
 return 30;
}

//  Finally, wrap it all up into...

function hebrew_to_jd(year, month, day)
{var jd, mon, months;
 months = hebrew_year_months(year);
 jd = HEBREW_EPOCH + hebrew_delay_1(year) +
      hebrew_delay_2(year) + day + 1;
 if (month < 7) {
        for (mon = 7; mon <= months; mon++) {
            jd += hebrew_month_days(year, mon);
        }
        for (mon = 1; mon < month; mon++) {
            jd += hebrew_month_days(year, mon);
        }
    } else {
        for (mon = 7; mon < month; mon++) {
            jd += hebrew_month_days(year, mon);
        }
    }

 return jd;
}

/*  JD_TO_HEBREW  --  Convert Julian date to Hebrew date
  This works by making multiple calls to the inverse function, and is this very slow.  */

function jd_to_hebrew(jd)
{var year, month, day, i, count, first;
 jd = Math.floor(jd) + 0.5;
 count = Math.floor(((jd - HEBREW_EPOCH) * 98496.0) / 35975351.0);
 year = count - 1;
 for (i = count; jd >= hebrew_to_jd(i, 7, 1); i++) {
        year++;
    }
 first = (jd < hebrew_to_jd(year, 1, 1)) ? 7 : 1;
 month = first;
 for (i = first; jd > hebrew_to_jd(year, i, hebrew_month_days(year, i)); i++) {
        month++;
    }
 day = (jd - hebrew_to_jd(year, month, 1)) + 1;
 return new Array(year, month, day);
}

function updateFromGregorian()
{var j, year, mon, mday, hour, min, sec,
  weekday, julcal, hebcal, islcal, hwdindex, utime, isoweek,
  may_countcal, mayhaabcal, maytzolkincal, bahcal, frrcal,
  indcal, isoday, xgregcal;
    alerting("");

    year = new Number(document.gregorian.year.value);
    mon = document.gregorian.month.selectedIndex;
    mday = new Number(document.gregorian.day.value);
    if (mday>=32) {alerting("Gregorian day number too high");return;}
    if (((mon==3)||(mon==5)||(mon==8)||(mon==10))&&(mday==31)) {alerting("Gregorian day number too high");return;}
    hour = min = sec = 0;
    if (nextday==true) {mday= mday+1}

    //  Update Julian day

    j = gregorian_to_jd(year, mon + 1, mday) +
           ((sec + 60 * (min + 60 * hour)) / 86400.0);

    juliandayvalue = j;
    //document.modifiedjulianday.day.value = j - JMJD;

    //  Update day of week in Gregorian and Hebrew boxes

    weekday = jwday(j);
    if (nextday==false) document.gregorian.wday.value = Weekdays[weekday];
    document.hebrew.hwday.value = HWeekdays[weekday];

    //  Update leap year status in Gregorian box

    document.gregorian.leap.value = NormLeap[leap_gregorian(year) ? 1 : 0];

    //  Update Hebrew Calendar

    hebcal = jd_to_hebrew(j);
    if (hebrew_leap(hebcal[0])) {
        document.hebrew.month.options.length = 13;
        document.hebrew.month.options[11] = new Option("Adar I");
        document.hebrew.month.options[12] = new Option("Adar II");
    } else {
        document.hebrew.month.options.length = 12;
        document.hebrew.month.options[11] = new Option("Adar");
    }
    document.hebrew.year.value = hebcal[0];
    document.hebrew.month.selectedIndex = hebcal[1] - 1;
    document.hebrew.day.value = hebcal[2];

    switch (hebrew_year_days(hebcal[0])) {
        case 353:
            document.hebrew.leap.value = "Common deficient year (353 days)";
            break;

        case 354:
            document.hebrew.leap.value = "Common regular year (354 days)";
            break;

        case 355:
            document.hebrew.leap.value = "Common complete year (355 days)";
            break;

        case 383:
            document.hebrew.leap.value = "Leap deficient year (383 days)";
            break;

        case 384:
            document.hebrew.leap.value = "Leap regular year (384 days)";
            break;

        case 385:
            document.hebrew.leap.value = "Leap complete year (385 days)";
            break;

        default:
            document.hebrew.leap.value = "Invalid year length: " +
                hebrew_year_days(hebcal[0]) + " days.";
            break;
    }

    //  Update Gregorian serial number

    if (document.gregserial != null) {document.gregserial.day.value = j - J0000;}
}


//  calcGregorian  --  Perform calculation starting with a Gregorian date

function calcGregorian()
{updateFromGregorian();}


function calcJulian()
{   var j, date, time;
    j = new Number(juliandayvalue);
    date = jd_to_gregorian(j);
    time = jhms(j);
    document.gregorian.year.value = date[0];
    document.gregorian.month.selectedIndex = date[1] - 1;
    document.gregorian.day.value = date[2];
    updateFromGregorian();
}

//  setJulian  --  Set Julian date and update all calendars

function setJulian(j)
{juliandayvalue = new Number(j);calcJulian();}

//  calcModifiedJulian  --  Update from Modified Julian day

function calcModifiedJulian()
{setJulian((new Number(document.modifiedjulianday.day.value)) + JMJD);
}

//  calcHebrew  --  Update from Hebrew calendar

function calcHebrew()
{ alerting("");
  if (document.hebrew.day.value>=31) {alerting("Hebrew day number too high");return;}
 if (nextday==true) {nextday=false;document.images.checkbox.src="unchecked.gif"}
 setJulian(hebrew_to_jd((new Number(document.hebrew.year.value)),
 document.hebrew.month.selectedIndex + 1,
 (new Number(document.hebrew.day.value))));
}

//  calcGregSerial  --  Update from Gregorian serial day number

function calcGregSerial()
{setJulian((new Number(document.gregserial.day.value)) + J0000);}

function change(e,image) {var el=window.event? event.srcElement: e.target
if (el.tagName=="INPUT"&&el.type=="button")
el.style.backgroundImage="url"+"('"+image+"')"}

var nextday=false;
function setCheckbox()
{if (nextday==false) {nextday=true;document.images.checkbox.src="checked.gif"}
 else {nextday=false;document.images.checkbox.src="unchecked.gif"}
}

</script>

</head>



<body bgcolor="#ff99ff" background="backgroundhebdate.gif" text="#000000" onload="alerting('------------ today ------------')">


<table border="0" width="100%" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td width="10%">&nbsp;</td>
<td width="39%">
  <form action="hebrewdate.htm" id="gregorian" enctype="text/javascript" name="gregorian">

  <table align="right" border="0">
  <tbody>
  <tr><td colspan="3">
  <center><font color="#0000ff">Gregorian</font>&nbsp;&nbsp;&nbsp;<br /><br /></center>
  </td></tr>
  <tr><td>Day: 
  <input name="day" id="CDay" value="" type="text" size="2" maxlength="2" /></td>
  <td>Month: 
  <select id="CMonth" name="month">
	<option value="1">January</option>
	<option value="2">February</option>
	<option value="3">March</option>
	<option value="4">April</option>
	<option value="5">May</option>
	<option value="6">June</option>
	<option value="7">July</option>
	<option value="8">August</option>
	<option value="9">September</option>
	<option value="10">October</option>
	<option value="11">November</option>
	<option value="12">December</option>
  </select>
  </td>
  <td>Year: 
  <input name="year" id="CYear" value="" type="text" size="4" maxlength="4" />
  </td></tr>
  <tr><td colspan="3" align="center">
  <img src="unchecked.gif" alt="" name="checkbox" height="13" width="13" onclick="setCheckbox();" />
After sunset&nbsp;&nbsp;&nbsp;&nbsp;
  </td></tr>
  <tr><td colspan="3" align="center">
  <input type="text" name="leap" value="" size="27" alt="" style="font-family:comic sans ms,arial,helvetica,sans-serif;font-size:11pt;color:#000000;background-image:url(backgroundhijri.gif);text-align:center;border-color:#000000;border:0px;" readonly="readonly" />
  </td></tr>
  <tr><td align="center" colspan="3">
Day of the week&nbsp;<input type="text" name="wday" value="" size="10" style="font-family:comic sans ms,arial,helvetica,sans-serif;font-weight:normal;font-size:11pt;background-color:#dddddd;text-align:center;border:1px solid #999999;" readonly="readonly" /> 
  </td></tr>
  <tr><td colspan="3" align="center"><br/>
  <input type="button" class="imbutton" name="CtoH" value="Gregorian to Hebrew >" onclick="calcGregorian();" onmouseover="change(event,'buttond.gif')" onmouseout="change(event,'buttonc.gif')" onfocus="blur()" />
  </td></tr>
  </tbody>
  </table>
  </form>

</td>

<td width="2%">&nbsp;
<script language="javaScript" type= "text/javascript">
    //  Preset the fields in the request form to today's date.
    var today = new Date();
    var y = today.getYear();
    if (y < 1000) { //compatibility
        y += 1900;
    }
    document.gregorian.year.value = y;
    document.gregorian.month.selectedIndex = today.getMonth();
    document.gregorian.day.value = today.getDate();
</script>

</td>

<td width="39%">

  <form action="hebrewdate.htm" id="hebrew" enctype="text/javascript" name="hebrew">

  <table align="left" border="0">
  <tbody>
  <tr><td colspan="3" align="center">
  <font color="#0000ff">Hebrew</font>&nbsp;&nbsp;&nbsp;<br /><br />
  </td></tr>
  <tr><td>Day: 
  <input name="day" id="HDay" value="" type="text" size="2" maxlength="2" /></td>
  <td>Month: 
  <select id="HMonth" name="month">
	<option value="1">Nisan</option>
	<option value="2">Iyyar</option>
	<option value="3">Sivan</option>
	<option value="4">Tammuz</option>
	<option value="5">Av</option>
	<option value="6">Elul</option>
	<option value="7">Tishri</option>
	<option value="8">Cheshvan</option>
	<option value="9">Kislev</option>
	<option value="10">Tevet</option>
	<option value="11">Shevat</option>
	<option >Adar I</option>
	<option >Adar II</option>
  </select></td>
  <td>Year: 
  <input name="year" id="HYear" value="" size="4" maxlength="4" type="text" />
  </td></tr>
  <tr><td colspan="3" align="center">
&nbsp;
  </td></tr>
  <tr><td colspan="3" align="center">
  <input name="leap"  type="text" value="" size="30" alt=""  readonly="readonly" />
  </td></tr>
  <tr><td align="center" colspan="3">
&nbsp;&nbsp;Day of the week&nbsp;<input  type="text" name="hwday" size="11" readonly="readonly" />
&nbsp;&nbsp;</td></tr>
  <tr><td colspan="3" align="center"><br/>
  <input type="button" class="imbutton" name="CtoH" value="&lt; Hebrew to Gregorian" onclick="calcHebrew();" onmouseover="change(event,'buttond.gif')" onmouseout="change(event,'buttonc.gif')" onfocus="blur()" />
  </td></tr>
  </tbody>
  </table>
  </form>

</td>
</tr>
<tr>
<td align="center" colspan="6">
<form action="hebrewdate.htm" id="message" enctype="text/javascript" name="message">
<input type="text" size="40" name="infobox" id="infobox" alt="" value="" style="font-family:comic sans ms,arial,helvetica,sans-serif;font-size:11pt;color:#000000;background-image:url(backgroundhebdate.gif);text-align:center;border-color:#000000;border:0px;" readonly="readonly" />
</form>
</td></tr>
</tbody>
</table>

<table style="align:left;border:#66f double 4px" cellpadding="1" cellspacing="0">
<tr><td>&nbsp;1&nbsp;</td><td>&nbsp;Tishri</td><td>&nbsp;7&nbsp;</td><td>&nbsp;Nisan</td></tr>
<tr><td>&nbsp;2&nbsp;</td><td>&nbsp;Cheshvan&nbsp;</td><td>&nbsp;8&nbsp;</td><td>&nbsp;Iyyar</td></tr>
<tr><td>&nbsp;3&nbsp;</td><td>&nbsp;Kislev</td><td>&nbsp;9&nbsp;</td><td>&nbsp;Sivan</td></tr>
<tr><td>&nbsp;4&nbsp;</td><td>&nbsp;Tevet</td><td>&nbsp;10&nbsp;</td><td>&nbsp;Tammuz&nbsp;</td></tr>
<tr><td>&nbsp;5&nbsp;</td><td>&nbsp;Shevat</td><td>&nbsp;11&nbsp;</td><td>&nbsp;Av</td></tr>
<tr><td>&nbsp;6&nbsp;</td><td>&nbsp;Adar I</td><td>&nbsp;12&nbsp;</td><td>&nbsp;Elul</td></tr>
</table>

<script language="javaScript" type= "text/javascript">
    calcGregorian();                  // Calculate today's values in other calendars
</script>

</body>
</html>
